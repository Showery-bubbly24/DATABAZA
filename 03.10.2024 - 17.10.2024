1) Все бегуны, которые зарегистрированы на текущий марафон отображаются в таблице, как: имя, фамилия - BibNumber (CountryCode).

select 
	m.marathonname,
	(u.firstname || ' ' || u.lastname) as FIO
from "User" u 
join runner r on u.email = r.email 
join gender g on r.genderid = g.genderid 
join registration reg on r.runnerid = reg.runnerid 
join registrationevent re on reg.registrationid = re.registrationid 
join "event" e on re.eventid = e.eventid
join marathon m on e.marathonid = m.marathonid
where m.marathonname = 'Marathon Skills 2014'
GROUP BY 
    m.marathonname,
    u.firstname,
    u.lastname

2) Таблица с результатами бегуна с предыдущих соревнований. Должен отображаться пол, возраст
Список должен показать каждое соревнование, в котором бегун соревновался ранее.

select (u.firstname || ' ' || u.lastname) as FIO, 
	g.gender, 
	(date_part('year', age(r.dateofbirth)) || ' years old') as age, 
	e.eventname, 
	re.racetime 
from public."User" u
join runner r on u.email = r.email
join gender g on r.genderid = g.genderid
join registration reg on r.runnerid = reg.runnerid
join registrationevent re on reg.registrationid = re.registrationid 
join "event" e on re.eventid = e.eventid 
where re.racetime is not null and re.racetime != 0
order by e.eventname, re.racetime;

3) Выводятся следующие поля для каждого события:
• Марафон: полное название марафона.
• Событие: полное название события.
• Время: время гонки бегуна на события в часах, минутах и секундах.
• В целом положение бегуна в марафоне среди всех участников.
• Отдельно по категории положение бегуна на событии, среди бегунов одного того же пола и той же возрастной категории.

select (u.firstname || ' ' || u.lastname) as FIO,
		g.gender,
		m.marathonname as Marathon,
		e.eventname as event,
		(((re.racetime / 3600)::text || 'h ') || (((re.racetime / 60) - (re.racetime / 3600) * 60)::text || 'min ') || ((re.racetime % 60)::text || 'sec')) as RaceTime,
		row_number() over( partition by e.eventname order by re.racetime),
		row_number() over( partition by e.eventname, g.gender order by re.racetime)
from public."User" u
join runner r on u.email = r.email
join gender g on r.genderid = g.genderid 
join registration reg on r.runnerid = reg.runnerid 
join registrationevent re on reg.registrationid = re.registrationid 
join "event" e on re.eventid = e.eventid
join marathon m on e.marathonid = m.marathonid
where re.racetime != 0
order by m.marathonname, e.eventname, re.racetime;

4) 

# Всего бегунов закончило: общее количество бегунов, у которые есть зафиксированное время соревнования.
select 
	e.eventname AS Event,
	count(re.racetime) AS Col_Participant
from "event" e
join registrationevent re on re.eventid = e.eventid 
where re.racetime is not null and re.racetime != 0
group by e.eventname;

# Среднее время гонки: Среднее значение всех результатов.
select
	e.eventname AS Event,
	round(avg(re.racetime), 2) AS mean_RaceTime,
	((round((avg(re.racetime) / 3600), 0)::text || 'h ') 
		|| (round((
			(avg(re.racetime) / 60) - ((avg(re.racetime) / 3600) * 60)
		), 0)::text || 'min ')
		|| (round((avg(re.racetime) % 60), 0)::text || 'sec')) AS RaceTime
from "event" e
join registrationevent re on re.eventid = e.eventid 
where re.racetime is not null and re.racetime != 0
group by e.eventname;

# Следующие поля должны быть отображены:
• Ранг: положение бегуна для выбранного события, пола и возрастной категории.
• Время гонки: время гонки бегуна в категориях в часах, минутах и секундах.
• Имя бегуна: имя бегуна.
• Страна: страна бегуна.
• Должны отображаться данные бегуна, которая содержит следующую информацию: Фамилия Имя бегуна, страна, возраст в годах полных, на дату марафона, а далее в табличной форме
select
	e.eventname AS Event,
	row_number() over( partition by e.eventname, g.gender order by re.racetime) AS RankNumber,
	(((re.racetime / 3600)::text || 'ч ') || (((re.racetime / 60) - (re.racetime / 3600) * 60)::text || 'м ') || ((re.racetime % 60)::text || 'с')) as RaceTime,
	(u.firstname || ' ' || u.lastname) as FIO,
	c.countryname AS Rodina,
	et.eventtypename AS EventType,
	m.marathonname AS Marathon
from registration reg
join runner r on reg.runnerid = r.runnerid
join gender g on r.genderid = g.genderid 
join "User" u on r.email = u.email 
join country c on r.countrycode = c.countrycode
join registrationevent re on reg.registrationid = re.registrationid
join "event" e on re.eventid = e.eventid 
join eventtype et on e.eventtypeid = et.eventtypeid 
join marathon m on e.marathonid = m.marathonid
where re.racetime != 0 and re.racetime is not null;

5) 

--??

select 
	COUNT(u.firstname)
from "User" u
join runner r on u.email = r.email
join registration reg on r.runnerid = reg.runnerid
join registrationstatus rs on reg.registrationstatusid = rs.registrationstatusid 
join registrationevent re on reg.registrationid = re.registrationid
join event e on re.eventid = e.eventid
join eventtype et on e.eventtypeid = et.eventtypeid
join marathon m on e.marathonid = m.marathonid
where m.marathonname = 'Marathon Skills 2014' and rs.registrationstatus = 'Race Attended' and et.eventtypename = 'Half Marathon';

select 
	m.marathonname,
	(u.firstname || ' ' || u.lastname) as FIO,
	u.email,
	rs.registrationstatus,
	et.eventtypename 
from "User" u
join runner r on u.email = r.email
join registration reg on r.runnerid = reg.runnerid
join registrationstatus rs on reg.registrationstatusid = rs.registrationstatusid 
join registrationevent re on reg.registrationid = re.registrationid
join event e on re.eventid = e.eventid
join eventtype et on e.eventtypeid = et.eventtypeid
join marathon m on e.marathonid = m.marathonid
where m.marathonname = 'Marathon Skills 2014' and rs.registrationstatus = 'Race Attended' and et.eventtypename = 'Half Marathon'
GROUP BY 
    m.marathonname,
    u.firstname,
    u.lastname,
    u.email,
    rs.registrationstatus,
	et.eventtypename;

--??

6)

# Спонсоры должны быть сгруппированы по благотворительным организациям, которым они перечисляют деньги.
select 
	c.charityname as orga,
	s.sponsorname as sponsor_FIO
from sponsorship s
join registration reg on s.registrationid = reg.registrationid
join charity c on reg.charityid = c.charityid
order by c.charityname;

# Благотворительные организации: общее количество благотворительных организаций.
select
	count(charityname) as Colvo_orgs
from charity;

# Всего спонсорских взносов: общая сумма спонсорских пожертвований, полученная для всех благотворительных организаций.
select
	sum(amount) as Obsh_amount
from sponsorship;

# Список должен показать наименование и общее количество спонсоров получил для каждой благотворительной организации.
select
	c.charityname,
	count(s.sponsorname)
from charity c
join registration reg on c.charityid = reg.charityid
join sponsorship s on reg.registrationid = s.registrationid
group by c.charityname;

7) Проверка бегуна по условиям:
Все поля обязательно заполнены.
Пароль должен отвечать следующим требованиям:
• Минимум 6 символов
• Минимум 1 прописная буква
• Минимум 1 цифра
• По крайней мере один из следующих символов: ! @ # $ % ^
• "Дата рождения" должна быть правильной датой и бегуну должен быть не менее 10 лет на момент регистрации.
select 
	(u.firstname || ' ' || u.lastname) as FIO,
	u."password",
	date_part('year', age(r.dateofbirth))
from "User" u
join runner r on u.email = r.email
where char_length(u."password") >= 6 and 
	u."password" similar to '%[a-z]%' and 
	u."password" similar to '%[0-9]%' and 
	u."password" similar to '%[!@#$%^]%' and 
	date_part('year', age(r.dateofbirth)) >= 10;

# Списком должно отображаться общее количество волонтеров.
select 
	count(v.volunteerid)
from volunteer v;

# Для каждого волонтера должно быть перечислено: имя, фамилия, страна и пол.
select 
	v.firstname,
	v.lastname,
	g.gender,
	c.countryname
from volunteer v
join gender g on v.genderid = g.genderid
join country c on v.countrycode = c.countrycode;
